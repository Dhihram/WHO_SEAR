df <- data_flu_id()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2]) %>%
filter(COUNTRY_AREA_TERRITORY == input$country_filter)
df
})
# Total cases
output$total_cases <- renderValueBox({
total <- sum(filtered_data2()$flu_all, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Cases",
icon = icon("calculator"),
color = "blue"
)
})
# Average cases per week
output$avg_cases <- renderValueBox({
avg <- mean(filtered_data2()$flu_all, na.rm = TRUE)
shinydashboard::valueBox(
value = round(avg, 2),
subtitle = "Average Cases Per Week",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation
output$growth_rate <- renderValueBox({
data <- filtered_data2() %>%
arrange(MMWR_WEEKSTARTDATE) %>%
filter(!is.na(flu_all))
if (nrow(data) >= 2) {
last_week <- tail(data$flu_all, 1)
prev_week <- tail(data$flu_all, 2)[1]
if (!is.na(prev_week) && prev_week != 0) {
growth_rate <- round((last_week - prev_week) / prev_week * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
# Plot
output$cases_plot <- renderPlotly({
data <- filtered_data()
data2 <- filtered_data2()
flu_colors <- c(
"flu_ah1"        = "#C9C9C9",
"flu_ah1n12009"  = "#8FE6E7",
"flu_ah3"        = "#00A1D5",
"flu_ah5"        = "#74F907",
"flu_anot"       = "#104f82",
"flu_bnot"       = "#9c4b30",
"flu_byam"       = "#FFB86D",
"flu_vic"        = "#F79700"
)
flu_labels <- c(
"flu_ah1"        = "A(H1)",
"flu_ah1n12009"  = "A(H1N1)pdm2009",
"flu_ah3"        = "A(H3)",
"flu_ah5"        = "A(H5)",
"flu_anot"       = "A not Subtyped",
"flu_bnot"       = "B not Determined",
"flu_byam"       = "B Yamagata",
"flu_vic"        = "B Victoria"
)
p <- plot_ly()
for (type in unique(na.omit(data$Flu_Type))) {
df_sub <- data %>% filter(Flu_Type == type)
p <- p %>%
add_trace(
data = df_sub,
x = ~MMWR_WEEKSTARTDATE,
y = ~Cases,
type = "bar",
name = flu_labels[[type]],
marker = list(color = flu_colors[[type]]),
hoverinfo = "text",
hovertext = ~paste0(flu_labels[[type]], ": ", Cases, " cases")
)
}
p <- p %>%
add_lines(
data = data2,
x = ~MMWR_WEEKSTARTDATE,
y = ~pos_rate,
yaxis = "y2",
name = "Positive Rate",
line = list(color = "red"),
hoverinfo = "text",
hovertext = ~paste0("Pos rate: ", pos_rate, "%")
) %>%
layout(
barmode = "stack",
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Flu Cases"),
yaxis2 = list(
overlaying = "y",
side = "right",
anchor = "x",
title = "Positive Rate (%)",
titlefont = list(color = "red"),
tickfont = list(color = "red"),
showgrid = FALSE
),
margin = list(t = 80, r = 80),  # Add top margin for the legend
legend = list(
orientation = "h",
x = 0.5,
y = 1.15,
xanchor = "center",
yanchor = "bottom"
)
)
p
})
output$ili_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~ILI_CASE, name = "ILI Case", marker = list(color = 'blue')) %>%
add_lines(y = ~ili_1000, name = "ILI per 1000", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "ILI Cases"),
yaxis2 = list(
title = "ILI per 1000",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
output$sari_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~SARI_CASE, name = "SARI Case", marker = list(color = 'darkgreen')) %>%
add_lines(y = ~sari_100, name = "SARI per 100", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "SARI Cases"),
yaxis2 = list(
title = "SARI per 100",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
# table
output$summary_table_ui <- renderUI({
summary_table <- filtered_data3()
table_html <- formattable::formattable(summary_table,
list(
Country = formatter("span", style = ~ style(color = "black", font.weight = "bold")),
area(col = 2:3) ~ formatter("span",
x ~ prettyNum(x, big.mark = ",", preserve.width = "none")),
area(col = 4:11) ~ function(x) percent(x / 100, digits = 2),
area(col = 4:11) ~ color_tile("#fcedf2", "#d66389")
)
)
HTML(as.character(table_html))  # convert to HTML for rendering in UI
})
}
# Launch app
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(lubridate)
library(formattable)
library(htmltools)
# Country list
country_sel <- c('All Country', 'Bangladesh', 'Bhutan', 'DPR Korea', 'India',
'Indonesia', 'Maldives', 'Myanmar', 'Nepal', 'Sri Lanka', 'Thailand',
'Timor-Leste')
disease_sel <- c('Influenza', 'Mpox', 'COVID-19', 'Dengue')
# UI
ui <- dashboardPage(
dashboardHeader(title = "Disease Surveillance Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
selectInput("disease_filter", "Disease", choices = disease_sel),
selectInput("country_filter", "Country", choices = country_sel)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidPage(
dateRangeInput("input_range", "Date Range",
start = as.Date("2024-01-01"),
end = Sys.Date()),
fluidRow(
valueBoxOutput("total_cases", width = 3),
valueBoxOutput("avg_cases", width = 3),
valueBoxOutput("growth_rate", width = 3)
),
fluidRow(
column(
width = 12,
tabsetPanel(
tabPanel("Subtypes", plotlyOutput("cases_plot")),
tabPanel("ILI", plotlyOutput("ili_plot")),
tabPanel("SARI", plotlyOutput("sari_plot")),
)
)
),
fluidRow(
box(
title = "Summary Table by Country",
status = "info",
solidHeader = TRUE,
width = 12,
uiOutput("summary_table_ui")
)
),
br(),
p("Notes:"),
p("Growth rate is calculated as the growth of cases from the previous week."),
p("Cases Annually shows the total cases per year grouped by selected country.")
)
)
)
)
)
# Server
server <- function(input, output) {
# Load datasets
data_flu_long <- reactive({
df <- read.csv("https://raw.githubusercontent.com/Dhihram/WHO_SEAR/main/Dat/flu_long.csv")
df$MMWR_WEEKSTARTDATE <- as.Date(df$MMWR_WEEKSTARTDATE)
df
})
data_flu_tab <- reactive({
df <- read.csv("https://raw.githubusercontent.com/Dhihram/WHO_SEAR/main/Dat/flu_dat_full.csv")
df$MMWR_WEEKSTARTDATE <- as.Date(df$MMWR_WEEKSTARTDATE)
df
})
data_flu_id <- reactive({
df <- read.csv("https://raw.githubusercontent.com/Dhihram/WHO_SEAR/refs/heads/main/Dat/fluid_dat_full.csv")
df$MMWR_WEEKSTARTDATE <- as.Date(df$MMWR_WEEKSTARTDATE)
df
})
# Filtered data
filtered_data <- reactive({
df <- data_flu_long()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2]) %>%
filter(COUNTRY_AREA_TERRITORY == input$country_filter)
df
})
filtered_data2 <- reactive({
df <- data_flu_tab()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2]) %>%
filter(COUNTRY_AREA_TERRITORY == input$country_filter)
df
})
filtered_data3 <- reactive({
df <- data_flu_tab()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2])
summary_table <- df %>%
group_by(COUNTRY_AREA_TERRITORY) %>%
summarise(
`Total Samples Tested` = sum(specimen, na.rm = TRUE),
`Total Subtyped` = sum(flu_all, na.rm = TRUE),
`A (H1) %` = sum(flu_ah1, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H3) %` = sum(flu_ah3, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H5) %` = sum(flu_ah5, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H1N1)2009 %` = sum(flu_ah1n12009, na.rm = TRUE) / `Total Subtyped` * 100,
`A (Unsubtyped) %` = sum(flu_anot, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Yamagata) %` = sum(flu_byam, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Victoria) %` = sum(flu_vic, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Unsubtyped) %` = sum(flu_bnot, na.rm = TRUE) / `Total Subtyped` * 100
) %>%
mutate(across(where(is.numeric), ~ ifelse(is.nan(.) | is.infinite(.), 0, .))) %>%
arrange(COUNTRY_AREA_TERRITORY) %>%
rename(Country = COUNTRY_AREA_TERRITORY)
summary_table
})
filtered_data4 <- reactive({
df <- data_flu_id()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2]) %>%
filter(COUNTRY_AREA_TERRITORY == input$country_filter)
df
})
# Total cases
output$total_cases <- renderValueBox({
total <- sum(filtered_data2()$flu_all, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Cases",
icon = icon("calculator"),
color = "blue"
)
})
# Average cases per week
output$avg_cases <- renderValueBox({
avg <- mean(filtered_data2()$flu_all, na.rm = TRUE)
shinydashboard::valueBox(
value = round(avg, 2),
subtitle = "Average Cases Per Week",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation
output$growth_rate <- renderValueBox({
data <- filtered_data2() %>%
arrange(MMWR_WEEKSTARTDATE) %>%
filter(!is.na(flu_all))
if (nrow(data) >= 2) {
last_week <- tail(data$flu_all, 1)
prev_week <- tail(data$flu_all, 2)[1]
if (!is.na(prev_week) && prev_week != 0) {
growth_rate <- round((last_week - prev_week) / prev_week * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
# Plot
output$cases_plot <- renderPlotly({
data <- filtered_data()
data2 <- filtered_data2()
flu_colors <- c(
"flu_ah1"        = "#C9C9C9",
"flu_ah1n12009"  = "#8FE6E7",
"flu_ah3"        = "#00A1D5",
"flu_ah5"        = "#74F907",
"flu_anot"       = "#104f82",
"flu_bnot"       = "#9c4b30",
"flu_byam"       = "#FFB86D",
"flu_vic"        = "#F79700"
)
flu_labels <- c(
"flu_ah1"        = "A(H1)",
"flu_ah1n12009"  = "A(H1N1)pdm2009",
"flu_ah3"        = "A(H3)",
"flu_ah5"        = "A(H5)",
"flu_anot"       = "A not Subtyped",
"flu_bnot"       = "B not Determined",
"flu_byam"       = "B Yamagata",
"flu_vic"        = "B Victoria"
)
p <- plot_ly()
for (type in unique(na.omit(data$Flu_Type))) {
df_sub <- data %>% filter(Flu_Type == type)
p <- p %>%
add_trace(
data = df_sub,
x = ~MMWR_WEEKSTARTDATE,
y = ~Cases,
type = "bar",
name = flu_labels[[type]],
marker = list(color = flu_colors[[type]]),
hoverinfo = "text",
hovertext = ~paste0(flu_labels[[type]], ": ", Cases, " cases")
)
}
p <- p %>%
add_lines(
data = data2,
x = ~MMWR_WEEKSTARTDATE,
y = ~pos_rate,
yaxis = "y2",
name = "Positive Rate",
line = list(color = "red"),
hoverinfo = "text",
hovertext = ~paste0("Pos rate: ", pos_rate, "%")
) %>%
layout(
barmode = "stack",
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Flu Cases"),
yaxis2 = list(
overlaying = "y",
side = "right",
anchor = "x",
title = "Positive Rate (%)",
titlefont = list(color = "red"),
tickfont = list(color = "red"),
showgrid = FALSE
),
margin = list(t = 80, r = 80),  # Add top margin for the legend
legend = list(
orientation = "h",
x = 0.5,
y = 1.15,
xanchor = "center",
yanchor = "bottom"
)
)
p
})
output$ili_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~ILI_CASE, name = "ILI Case", marker = list(color = 'blue')) %>%
add_lines(y = ~ili_1000, name = "ILI per 1000", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "ILI Cases"),
yaxis2 = list(
title = "ILI per 1000",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
output$sari_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~SARI_CASE, name = "SARI Case", marker = list(color = 'darkgreen')) %>%
add_lines(y = ~sari_100, name = "SARI per 100", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "SARI Cases"),
yaxis2 = list(
title = "SARI per 100",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
# table
output$summary_table_ui <- renderUI({
summary_table <- filtered_data3()
table_html <- formattable::formattable(summary_table,
list(
Country = formatter("span", style = ~ style(color = "black", font.weight = "bold")),
area(col = 2:3) ~ formatter("span",
x ~ prettyNum(x, big.mark = ",", preserve.width = "none")),
area(col = 4:11) ~ function(x) percent(x / 100, digits = 2),
area(col = 4:11) ~ color_tile("#fcedf2", "#d66389")
)
)
HTML(as.character(table_html))  # convert to HTML for rendering in UI
})
}
# Launch app
shinyApp(ui, server)
