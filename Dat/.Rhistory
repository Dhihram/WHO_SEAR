output$total_death3 <- renderValueBox({
total <- sum(filtered_cholera()$NEW_SUS_DEATHS, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Suspected Death",
icon = icon("calculator"),
color = "purple"
)
})
# Average cases per week cholera
output$avg_cases3 <- renderValueBox({
avg <- mean(filtered_cholera()$NEW_CONF_CASES, na.rm = TRUE)
shinydashboard::valueBox(
value = round(avg, 2),
subtitle = "Average Cases Per Week",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation cholera
output$growth_rate3 <- renderValueBox({
data <- filtered_cholera() %>%
arrange(MMWR_WEEK_START) %>%
filter(!is.na(NEW_CONF_CASES))
if (nrow(data) >= 2) {
last_week <- tail(data$NEW_CONF_CASES, 1)
prev_week <- tail(data$NEW_CONF_CASES, 2)[1]
if (!is.na(prev_week) && prev_week != 0) {
growth_rate <- round((last_week - prev_week) / prev_week * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
# Total cases covid-19
output$total_cases4 <- renderValueBox({
total <- sum(filtered_cov1()$New.Cases, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Cases",
icon = icon("calculator"),
color = "blue"
)
})
# Total death covid-19
output$total_death4 <- renderValueBox({
total <- sum(filtered_cov1()$New.Deaths, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Death",
icon = icon("calculator"),
color = "purple"
)
})
# Average cases per week covid-19
output$avg_cases4 <- renderValueBox({
avg <- mean(filtered_cov1()$New.Cases, na.rm = TRUE)
shinydashboard::valueBox(
value = format(round(avg, 2),big.mark = ","),
subtitle = "Average Cases Per Week",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation covid-19
output$growth_rate4 <- renderValueBox({
data <- filtered_cov1() %>%
arrange(date) %>%
filter(!is.na(New.Cases))
if (nrow(data) >= 2) {
last_week <- tail(data$New.Cases, 1)
prev_week <- tail(data$New.Cases, 2)[1]
if (!is.na(prev_week) && prev_week != 0) {
growth_rate <- round((last_week - prev_week) / prev_week * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
#News Ticker
output$news_ticker <- renderUI({
# Simulated outbreak_df (you can replace this with your real data)
outbreak_df <- read.csv('https://raw.githubusercontent.com/Dhihram/WHO_SEAR/refs/heads/main/Dat/who_outbreak.csv')
# Collapse outbreak entries into a scrolling sentence
ticker_text <- paste0(outbreak_df$disease, " - ", outbreak_df$country, " (", outbreak_df$date, ")", collapse = " | ")
tags$div(class = "ticker-text", ticker_text)
})
# Plot
#flu
output$cases_plot <- renderPlotly({
data <- filtered_data()
data2 <- filtered_data2()
flu_colors <- c(
"flu_ah1"        = "#C9C9C9",
"flu_ah1n12009"  = "#8FE6E7",
"flu_ah3"        = "#00A1D5",
"flu_ah5"        = "#74F907",
"flu_anot"       = "#104f82",
"flu_bnot"       = "#9c4b30",
"flu_byam"       = "#FFB86D",
"flu_vic"        = "#F79700"
)
flu_labels <- c(
"flu_ah1"        = "A(H1)",
"flu_ah1n12009"  = "A(H1N1)pdm2009",
"flu_ah3"        = "A(H3)",
"flu_ah5"        = "A(H5)",
"flu_anot"       = "A not Subtyped",
"flu_bnot"       = "B not Determined",
"flu_byam"       = "B Yamagata",
"flu_vic"        = "B Victoria"
)
p <- plot_ly()
for (type in unique(na.omit(data$Flu_Type))) {
df_sub <- data %>% filter(Flu_Type == type)
p <- p %>%
add_trace(
data = df_sub,
x = ~MMWR_WEEKSTARTDATE,
y = ~Cases,
type = "bar",
name = flu_labels[[type]],
marker = list(color = flu_colors[[type]]),
hoverinfo = "text",
hovertext = ~paste0(flu_labels[[type]], ": ", Cases, " cases")
)
}
p <- p %>%
add_lines(
data = data2,
x = ~MMWR_WEEKSTARTDATE,
y = ~pos_rate,
yaxis = "y2",
name = "Positive Rate",
line = list(color = "red"),
hoverinfo = "text",
hovertext = ~paste0("Pos rate: ", pos_rate, "%")
) %>%
layout(
barmode = "stack",
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Flu Cases"),
yaxis2 = list(
overlaying = "y",
side = "right",
anchor = "x",
title = "Positive Rate (%)",
titlefont = list(color = "red"),
tickfont = list(color = "red"),
showgrid = FALSE,
rangemode = "nonnegative"
),
margin = list(t = 80, r = 80),  # Add top margin for the legend
legend = list(
orientation = "h",
x = 0.5,
y = 1.15,
xanchor = "center",
yanchor = "bottom"
)
)
p
})
output$ili_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~ILI_CASE, name = "ILI Case", marker = list(color = 'blue')) %>%
add_lines(y = ~ili_1000, name = "ILI per 1000", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "ILI Cases"),
yaxis2 = list(
title = "ILI per 1000",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE,
rangemode = "nonnegative"
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
output$sari_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~SARI_CASE, name = "SARI Case", marker = list(color = 'darkgreen')) %>%
add_lines(y = ~sari_100, name = "SARI per 100", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "SARI Cases"),
yaxis2 = list(
title = "SARI per 100",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE,
rangemode = "nonnegative"
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
output$covid_sentinel_plot <- renderPlotly({
df <- filtered_data5()
plot_ly(df, x = ~Week.start.date) %>%
add_bars(y = ~SARS_COV_2_POS, name = "Positive Case", marker = list(color = 'darkviolet')) %>%
add_lines(y = ~`X..Pos.Rate`, name = "% Pos Rate", yaxis = "y2", line = list(color = "red", dash = "dot")) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Positive Cases", side = "left"),
yaxis2 = list(title = "% Positivity Rate", side = "right",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE,
rangemode = "nonnegative"
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
# table
output$summary_table_ui <- renderUI({
summary_table <- filtered_data3()
table_html <- formattable::formattable(summary_table,
list(
Country = formatter("span", style = ~ style(color = "black", font.weight = "bold")),
area(col = 2:3) ~ formatter("span",
x ~ prettyNum(x, big.mark = ",", preserve.width = "none")),
area(col = 4:11) ~ function(x) percent(x / 100, digits = 2),
area(col = 4:11) ~ color_tile("#fcedf2", "#d66389")
)
)
HTML(as.character(table_html))  # convert to HTML for rendering in UI
})
#plot dengue
output$years_deng_plot <- renderPlotly({
req(filtered_deng())  # ensure reactive input is ready
data <- filtered_deng()
# Ensure 'year' and 'month' are ordered
data$year <- factor(data$year)
data$month <- factor(data$month, levels = month.abb, ordered = TRUE)
years <- sort(unique(data$year))
last_year <- tail(years, 1)
n_prev_years <- length(years) - 1
# Handle color generation safely
base_colors <- brewer.pal(min(max(n_prev_years, 3), 8), "Set2")
if (n_prev_years > 8) {
extra_colors <- brewer.pal(n_prev_years - 8, "Dark2")
base_colors <- c(base_colors, extra_colors)
}
# Convert base colors to rgba for transparency
alpha_colors <- sapply(base_colors, function(clr) {
rgb_val <- col2rgb(clr) / 255
sprintf("rgba(%d,%d,%d,0.6)", rgb_val[1]*255, rgb_val[2]*255, rgb_val[3]*255)
})
color_palette <- c(
setNames(alpha_colors, years[-length(years)]),
setNames("red", last_year)
)
# Initialize plot
p <- plot_ly()
for (yr in years) {
df_year <- data %>% filter(year == yr) %>% arrange(month)
line_style <- if (yr == last_year) "solid" else "dash"
line_color <- color_palette[[as.character(yr)]]
line_opacity <- if (yr == last_year) 1 else 0.97
p <- p %>% add_trace(
data = df_year,
x = ~month,
y = ~cases,
type = 'scatter',
mode = 'lines+markers',
name = as.character(yr),
hovertemplate = paste0(yr, " : %{y:,}<extra></extra>"),
line = list(dash = line_style, width = 2, color = line_color),
marker = list(color = line_color),
opacity = line_opacity,
connectgaps = TRUE
)
}
p %>% layout(
title = ' ',
xaxis = list(title = "Month"),
yaxis = list(title = "Cases"),
hovermode = "x unified"
)
})
output$avg_deng_plot <- renderPlotly({
req(filtered_deng2())
monthly_summary <- filtered_deng2()
plot_ly(monthly_summary, x = ~month) %>%
# Confidence ribbon (lower to upper)
add_ribbons(
ymin = ~lower,
ymax = ~upper,
name = "95% CI",
fillcolor = "rgba(0,100,80,0.2)",
line = list(color = "transparent"),
showlegend = TRUE
) %>%
# Mean line and matching marker
add_trace(
y = ~mean_cases,
type = 'scatter',
mode = 'lines+markers',
name = "Mean Cases",
line = list(color = 'black'),
marker = list(color = 'black')
) %>%
# Median line and matching marker
add_trace(
y = ~median_cases,
type = 'scatter',
mode = 'lines+markers',
name = "Median Cases",
line = list(color = 'blue', dash = 'dash'),
marker = list(color = 'blue')
) %>%
layout(
title = " ",
xaxis = list(title = "Month", type = "category"),
yaxis = list(title = "Cases"),
hovermode = "x unified"
)
})
output$trend_cholera_plot <- renderPlotly({
req(filtered_cholera())
data <- filtered_cholera()
plot_ly(data, x = ~MMWR_WEEK_START) %>%
add_bars(y = ~NEW_CONF_CASES, name = "Positive Case", marker = list(color = 'green')) %>%
layout( title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Positive Cases", side = "left"))
})
output$trend_death_plot <- renderPlotly({
req(filtered_cholera())
data <- filtered_cholera()
plot_ly(data, x = ~MMWR_WEEK_START) %>%
add_bars(y = ~NEW_SUS_DEATHS, name = "Suspect Deaths", marker = list(color = 'firebrick')) %>%
layout( title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Suspect Deaths", side = "left"))
})
output$covid_plot <- renderPlotly({
req(filtered_cov1())
data <- filtered_cov1()
plot_ly(data, x = ~EPI_W) %>%
add_bars(
y = ~New.Cases,
name = "New Cases",
yaxis = "y1",
text = ~paste("Week-", EPI_W, ", Cases = ", format(New.Cases, big.mark = ",")),
textposition = "none",
hoverinfo = "text"
) %>%
add_lines(
y = ~New.Deaths,
name = "New Deaths",
yaxis = "y2",
line = list(color = "red"),
text = ~paste("Week-", EPI_W, ", Deaths = ", format(New.Deaths, big.mark = ",")),
hoverinfo = "text"
) %>%
layout(
title = " ",
xaxis = list(title = "Week"),
yaxis = list(title = "New Cases", side = "left", showgrid = FALSE),
yaxis2 = list(
title = "New Deaths",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE,
rangemode = "nonnegative"
),
legend = list(x = 0.1, y = 1.1, orientation = "h")
)
})
output$variant_plot <- renderPlotly({
req(filtered_cov2())
data <- filtered_cov2()
plot_ly(data,
x = ~ISO_week,
y = ~percent,
color = ~lineage_group,
type = 'scatter',
mode = 'none',
stackgroup = 'one',
fill = 'tonexty',
text = ~paste(lineage_group, " :", round(percent, 1), "%"),
hoverinfo = 'text') %>%
layout(
title = " ",
xaxis = list(
title = "Week",
tickmode = "linear",
dtick = 2  # tick every 2 ISO weeks
),
yaxis = list(title = "Percentage", ticksuffix = "%"),
hovermode = 'x unified',    # << makes the tooltip unified for all groups per week
showlegend = TRUE,
legend = list(x = 0.1, y = 1.1, orientation = "h")
)
})
}
# Launch app
shinyApp(ui, server)
#save to github
setwd("~/GitHub/WHO_SEAR/Dat")
write.csv(data, 'covid_variant.csv', row.names = FALSE)
#save to database
setwd("C:/Users/dhihr/World Health Organization/SEARO_HIM - database/covid-19/GISAID data")
write.csv(data, 'data_trend_cov_variant_22062025.csv', row.names = FALSE)
View(data)
setwd("C:/Users/dhihr/Downloads")
thailand <- read_tsv("thailand_hcov-19_2025_06_22_15.tsv") %>% select(-`AA Substitutions`)
india <- read_tsv("india_hcov-19_2025_06_22_15.tsv") %>% select(-`AA Substitutions`)
bangladesh <- read_tsv("bangladesh_hcov-19_2025_06_22_15.tsv") %>% select(-`AA Substitutions`)
myanmar <- read_tsv("myanmar_hcov-19_2025_06_22_15.tsv") %>% select(-`AA Substitutions`)
data <- rbind(thailand,india,bangladesh,myanmar)
summary(data)
data <- data %>%
separate(col = Location, into = c("Continent", "Country", "City"), sep = " / ")
table(data$Lineage)
data <- data %>% filter(Country %in% c('Bangladesh', 'India', 'Nepal', 'Maldives',
'Sri Lanka', 'Bhutan', 'Myanmar', 'Thailand'))
data$`Collection date` <- as.Date(data$`Collection date`)
data <- data %>%
mutate(
lineage_group = case_when(
str_detect(Lineage, "JN\\.1|MV\\.1|PC.2.1|LF.7.1|LF.7.7.1|MB.1.1|LF.7") ~ "JN.1*",
str_detect(Lineage, "XEC") ~ "XEC*",
str_detect(Lineage, "XFG|JN.1.6|JN.1.40|XFC|JN.1.3") ~ "XFG*",
str_detect(Lineage, "XDV|BA.2|NB.1.8.1") ~ "NB.1.8.1*",
TRUE ~ "Other"
),
lineage_group = factor(lineage_group, levels = c("JN.1*", "XEC*", "NB.1.8.1*", "XFG*", "Other"))
)
data <- data %>% select(Country, `Collection date`, lineage_group)
head(data)
# Calculate the last day (Sunday) of the ISO week
data <- data %>%
mutate(ISO_week = isoweek(`Collection date`),
ISO_week_end = `Collection date` + days(7 - wday(`Collection date`, week_start = 1)))
summary_data <- data %>%
group_by(Country, ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(Country, ISO_week, ISO_week_end) %>%
mutate(percent = (n / sum(n)) * 100
) %>% arrange(Country, ISO_week_end)
group_data <- summary_data %>%
group_by(ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(ISO_week, ISO_week_end) %>%
mutate(
Country = 'All Country',
percent = (n / sum(n)) * 100
) %>%
select(Country, ISO_week, lineage_group, ISO_week_end, n, percent)
data <- rbind(group_data, summary_data)
head(data)
#save to database
setwd("C:/Users/dhihr/World Health Organization/SEARO_HIM - database/covid-19/GISAID data")
write.csv(data, 'data_trend_cov_variant_22062025.csv', row.names = FALSE)
#save to github
setwd("~/GitHub/WHO_SEAR/Dat")
write.csv(data, 'covid_variant.csv', row.names = FALSE)
View(data)
