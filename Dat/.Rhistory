return dataItem.Text === 'South-East Asia Region';
});
dropdown.trigger('change');
// Trigger filtering by refreshing the data
var panel = $('.filter-widget__wrapper').data('kendoPanelBar');
if (panel && panel.options && panel.options.dataSource) {
panel.options.dataSource.read();  // Force reload
}
// Additional fallback: manually trigger filter if widget exists
if (typeof filterWidgetApplyFilters === 'function') {
filterWidgetApplyFilters();
}
}
"
remDr$executeScript(js_script)
Sys.sleep(6)
# Scroll to ensure all data is visible
for (i in 1:4) {
remDr$executeScript("window.scrollTo(0, document.body.scrollHeight);")
Sys.sleep(2)
}
# Scrape the filtered outbreak titles
headline_links <- remDr$findElements(using = "css selector", value = "a[href*='/emergencies/disease-outbreak-news/item']")
titles_raw <- sapply(headline_links, function(el) el$getElementText()[[1]])
# Clean into table
outbreak_df <- tibble(raw = titles_raw) %>%
mutate(
clean = str_remove(raw, "^Disease Outbreak News\\n"),
date = str_extract(clean, "^\\d{1,2} \\w+ \\d{4}"),
title = str_remove(clean, "^\\d{1,2} \\w+ \\d{4} \\|\\s*"),
region = "South-East Asia Region"
) %>%
select(date, title, region)
print(outbreak_df)
library(RSelenium)
library(tidyverse)
# Clean up session
remDr$close()
rD$server$stop()
library(RSelenium)
library(tidyverse)
# Start RSelenium (adjust chromever to your installed version if needed)
rD <- rsDriver(browser = "chrome", chromever = "104.0.5112.79", port = 4850L, verbose = FALSE)
remDr <- rD$client
# Navigate to the WHO Disease Outbreak News page
remDr$navigate("https://www.who.int/emergencies/disease-outbreak-news")
Sys.sleep(10)  # Give time for page and JS to load
# Scroll down to trigger content loading
for (i in 1:5) {
remDr$executeScript("window.scrollTo(0, document.body.scrollHeight);")
Sys.sleep(2)
}
# Get all visible outbreak title links (they include date + title)
headline_links <- remDr$findElements(using = "css selector", value = "a[href*='/emergencies/disease-outbreak-news/item']")
# Extract text content from those links
titles_raw <- sapply(headline_links, function(el) el$getElementText()[[1]])
# Clean the result into structured columns
outbreak_df <- tibble(raw = titles_raw) %>%
mutate(
clean = str_remove(raw, "^Disease Outbreak News\\n"),
date = str_extract(clean, "^\\d{1,2} \\w+ \\d{4}"),
title = str_remove(clean, "^\\d{1,2} \\w+ \\d{4} \\|\\s*")
) %>%
%>%
# Clean the result into structured columns
outbreak_df <- tibble(raw = titles_raw) %>%
mutate(
clean = str_remove(raw, "^Disease Outbreak News\\n"),
date = str_extract(clean, "^\\d{1,2} \\w+ \\d{4}"),
title = str_remove(clean, "^\\d{1,2} \\w+ \\d{4} \\|\\s*")
) %>%
separate(title, into = c("disease", "location"), sep = " - ", extra = "merge", fill = "right") %>%
select(date, disease, location, region)
# Extract text content from those links
titles_raw <- sapply(headline_links, function(el) el$getElementText()[[1]])
# Clean the result into structured columns
outbreak_df <- tibble(raw = titles_raw) %>%
mutate(
clean = str_remove(raw, "^Disease Outbreak News\\n"),
date = str_extract(clean, "^\\d{1,2} \\w+ \\d{4}"),
title = str_remove(clean, "^\\d{1,2} \\w+ \\d{4} \\|\\s*")
) %>%
separate(title, into = c("disease", "location"), sep = " - ", extra = "merge", fill = "right") %>%
select(date, disease, location, region)
# Clean the result into structured columns
outbreak_df <- tibble(raw = titles_raw) %>%
mutate(
clean = str_remove(raw, "^Disease Outbreak News\\n"),
date = str_extract(clean, "^\\d{1,2} \\w+ \\d{4}"),
title = str_remove(clean, "^\\d{1,2} \\w+ \\d{4} \\|\\s*")
) %>%
separate(title, into = c("disease", "location"), sep = " - ", extra = "merge", fill = "right") %>%
select(date, disease, location)
# Show the result
print(outbreak_df)
View(outbreak_df)
View(outbreak_df)
outbreak_df <- tibble(raw = titles_raw) %>%
mutate(
clean = str_remove(raw, "^Disease Outbreak News\\n"),
date = str_extract(clean, "^\\d{1,2} \\w+ \\d{4}"),
title = str_remove(clean, "^\\d{1,2} \\w+ \\d{4} \\|\\s*")
) %>%
separate(
title,
into = c("disease", "location"),
sep = "\\s*[â€“-]\\s*",   # regex: match hyphen OR en dash with optional spaces
extra = "merge",
fill = "right"
) %>%
select(date, disease, location)
print(outbreak_df)
View(outbreak_df)
# Clean up session
remDr$close()
rD$server$stop()
54+20+2+34
11+3+1+12+10+106
df <- data.frame(
source = c('Reported Perperator'),
perperator = c('Police', 'Multiple', 'No Information',
'NSA', 'Other', 'State Military'),
n = c(11, 3,1,12, 10, 106)
)
sum(df$n)
df$label <- paste0((df$n/sum(df$n), "\n", round(df$pct * 100, 1), "%")
df$label <- paste0(df$perperator, "\n",
round((df$n/sum(df$n)) * 100, 0), "%")
df$pct <- (df$n/sum(df$n)
df$label <- paste0(df$perperator, "\n",
df$pct <- df$n/sum(df$n)
df$pct <- df$n/sum(df$n)
df$label <- paste0(df$perperator, "\n",
round(df$pct * 100, 0), "%")
ggplot(df,
aes(x = source, stratum = perperator, alluvium = perperator,
y = pct, fill = perperator, label = label)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback") +
geom_stratum() +
geom_text(stat = "stratum", size = 3) +
scale_y_continuous(labels = scales::percent) +
labs(title = "vaccination survey responses at three points in time",
y = "pct") +
theme_minimal()
library(ggplot2)
library(ggalluvial)
ggplot(df,
aes(x = source, stratum = perperator, alluvium = perperator,
y = pct, fill = perperator, label = label)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback") +
geom_stratum() +
geom_text(stat = "stratum", size = 3) +
scale_y_continuous(labels = scales::percent) +
labs(title = "vaccination survey responses at three points in time",
y = "pct") +
theme_minimal()
df <- data.frame(
source = 'Reported Perpetrator',
perperator = c('Police', 'Multiple', 'No Information',
'NSA', 'Other', 'State Military'),
n = c(11, 3, 1, 12, 10, 106)
)
df$pct <- df$n / sum(df$n)
df$label <- paste0(df$perperator, "\n", round(df$pct * 100, 0), "%")
ggplot(df,
aes(x = source, stratum = perperator, y = pct,
fill = perperator, label = label)) +
geom_stratum() +
geom_text(stat = "stratum", size = 3) +
scale_y_continuous(labels = scales::percent) +
labs(title = "Reported Perpetrators", y = "Percentage", x = NULL) +
theme_minimal()
ggplot(df,
aes(axis1 = source, axis2 = perperator, y = n)) +
geom_alluvium(aes(fill = perperator), width = 1/12) +
geom_stratum(width = 1/12, fill = "grey80", color = "black") +
geom_text(stat = "stratum", aes(label = label), size = 3) +
labs(title = "Flow from Source to Perpetrator",
x = "", y = "Number of Reports") +
theme_minimal() +
scale_x_discrete(limits = c("Source", "Perpetrator"))
# Chunk 1
#| context: setup
library(shiny)
# Chunk 2
#| context: ui
sliderInput("bins", "Number of bins:", min = 5, max = 50, value = 20)
# Chunk 3
#| context: ui
plotOutput("hist")
# Chunk 4
#| context: server
output$hist <- renderPlot({
hist(faithful$waiting, breaks = input$bins)
})
df <- safe_read_csv('https://raw.githubusercontent.com/Dhihram/WHO_SEAR/main/Dat/attack_healthcare_dat.csv')
x <- read.csv('https://raw.githubusercontent.com/Dhihram/WHO_SEAR/main/Dat/attack_healthcare_dat.csv')
table(x$Certainty.Level)
-20/100
View(x)
library(tidyverse)
library(lubridate)
library(ISOweek)
library(openxlsx)
setwd("C:/Users/dhihr/World Health Organization/SEARO_HIM - Covid-19")
Bangladesh <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'BAN') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Bangladesh')
Myanmar <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'MMR') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Myanmar')
Nepal <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'NEP') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Nepal')
India <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'IND') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'India')
Thailand <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'THA') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Thailand')
data <- rbind(Bangladesh, Myanmar, Nepal, India, Thailand)
# Add the year column (e.g., 2025)
data$Year <- 2025
# Create ISO week format (e.g., "2025-W01")
data$ISOweek <- sprintf("%d-W%02d", data$Year, data$EPI_W)
# Get the last date (Sunday) of each ISO week
# Use "-7" for Sunday
data$date <- ISOweek::ISOweek2date(paste0(data$ISOweek, "-7"))
data <- data %>% select(-ISOweek) %>% select(Country, date, Year, EPI_W,
New.Cases, New.Deaths)
View(data)
View(data)
library(lubridate)
library(tidyverse)
setwd("C:/Users/dhihr/Downloads")
thailand <- read_tsv("thailand_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
india <- read_tsv("india_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
bangladesh <- read_tsv("bangladesh_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
myanmar <- read_tsv("myanmar_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
data <- rbind(thailand,india,bangladesh,myanmar)
summary(data)
data <- data %>%
separate(col = Location, into = c("Continent", "Country", "City"), sep = " / ")
table(data$Lineage)
data <- data %>% filter(Country %in% c('Bangladesh', 'India', 'Nepal', 'Maldives',
'Sri Lanka', 'Bhutan', 'Myanmar', 'Thailand'))
data$`Collection date` <- as.Date(data$`Collection date`)
data <- data %>%
mutate(
lineage_group = case_when(
str_detect(Lineage, "JN\\.1\\.6|JN\\.1\\.40|JN\\.1\\.16|XFG") ~ "XFG*",
str_detect(Lineage, "JN\\.1|MV\\.1|PC\\.2\\.1|LF\\.7\\.1|LF\\.7\\.7\\.1|MB\\.1\\.1|LF\\.7|XFC") ~ "JN.1*",
str_detect(Lineage, "XEC") ~ "XEC*",
str_detect(Lineage, "XDV|BA.2|NB.1.8.1|PQ") ~ "NB.1.8.1*",
TRUE ~ "Other"
),
lineage_group = factor(lineage_group, levels = c("JN.1*", "XEC*", "NB.1.8.1*", "XFG*", "Other"))
)
data <- data %>% select(Country, `Collection date`, lineage_group)
head(data)
# Calculate the last day (Sunday) of the ISO week
data <- data %>%
mutate(ISO_week = isoweek(`Collection date`),
ISO_week_end = `Collection date` + days(7 - wday(`Collection date`, week_start = 1)))
summary_data <- data %>%
group_by(Country, ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(Country, ISO_week, ISO_week_end) %>%
mutate(percent = (n / sum(n)) * 100
) %>% arrange(Country, ISO_week_end)
group_data <- summary_data %>%
group_by(ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(ISO_week, ISO_week_end) %>%
mutate(
Country = 'All Country',
percent = (n / sum(n)) * 100
) %>%
select(Country, ISO_week, lineage_group, ISO_week_end, n, percent)
summary_data <- data %>%
group_by(Country, ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(Country, ISO_week, ISO_week_end) %>%
mutate(percent = (n / sum(n)) * 100
) %>% arrange(Country, ISO_week_end)
summary_data_full <- summary_data %>%
group_by(Country) %>%
# build a complete grid: all weeks Ã— all lineages Ã— country
complete(
ISO_week_end = seq(min(ISO_week_end), max(ISO_week_end), by = "1 week"),
lineage_group,
fill = list(n = 0, percent = 0)   # replace NA with 0
) %>%
ungroup()
summary_data_full <- summary_data %>%
group_by(Country) %>%
# build a complete grid: all weeks Ã— all lineages Ã— country
complete(
ISO_week = seq(min(ISO_week), max(ISO_week), by = "1 week"),
lineage_group,
fill = list(n = 0, percent = 0)   # replace NA with 0
) %>%
ungroup()
setwd("C:/Users/dhihr/Downloads")
thailand <- read_tsv("thailand_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
india <- read_tsv("india_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
bangladesh <- read_tsv("bangladesh_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
myanmar <- read_tsv("myanmar_hcov-19_2025_07_21_04.tsv") %>% select(-`AA Substitutions`)
data <- rbind(thailand,india,bangladesh,myanmar)
summary(data)
data <- data %>%
separate(col = Location, into = c("Continent", "Country", "City"), sep = " / ")
table(data$Lineage)
data <- data %>% filter(Country %in% c('Bangladesh', 'India', 'Nepal', 'Maldives',
'Sri Lanka', 'Bhutan', 'Myanmar', 'Thailand'))
data$`Collection date` <- as.Date(data$`Collection date`)
data <- data %>%
mutate(
lineage_group = case_when(
str_detect(Lineage, "JN\\.1\\.6|JN\\.1\\.40|JN\\.1\\.16|XFG") ~ "XFG*",
str_detect(Lineage, "JN\\.1|MV\\.1|PC\\.2\\.1|LF\\.7\\.1|LF\\.7\\.7\\.1|MB\\.1\\.1|LF\\.7|XFC") ~ "JN.1*",
str_detect(Lineage, "XEC") ~ "XEC*",
str_detect(Lineage, "XDV|BA.2|NB.1.8.1|PQ") ~ "NB.1.8.1*",
TRUE ~ "Other"
),
lineage_group = factor(lineage_group, levels = c("JN.1*", "XEC*", "NB.1.8.1*", "XFG*", "Other"))
)
data <- data %>% select(Country, `Collection date`, lineage_group)
head(data)
# Calculate the last day (Sunday) of the ISO week
data <- data %>%
mutate(ISO_week = isoweek(`Collection date`),
ISO_week_end = `Collection date` + days(7 - wday(`Collection date`, week_start = 1)))
summary_data <- data %>%
group_by(Country, ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(Country, ISO_week, ISO_week_end) %>%
mutate(percent = (n / sum(n)) * 100
) %>% arrange(Country, ISO_week_end)
summary_data_full <- summary_data %>%
group_by(Country) %>%
# build a complete grid: all weeks Ã— all lineages Ã— country
complete(
ISO_week = seq(min(ISO_week), max(ISO_week), by = "1 week"),
lineage_group,
fill = list(n = 0, percent = 0)   # replace NA with 0
) %>%
ungroup()
summary_data_full <- summary_data %>%
group_by(Country) %>%
tidyr::complete(
ISO_week = seq(min(ISO_week, na.rm = TRUE), max(ISO_week, na.rm = TRUE), by = 1),
nesting(lineage_group),
fill = list(n = 0, percent = 0)
) %>%
arrange(Country, ISO_week) %>%
ungroup()
View(summary_data_full)
summary_data
library(tidyverse)
library(lubridate)
library(ISOweek)
library(openxlsx)
setwd("C:/Users/dhihr/World Health Organization/SEARO_HIM - Covid-19")
Bangladesh <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'BAN') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Bangladesh')
Myanmar <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'MMR') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Myanmar')
Nepal <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'NEP') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Nepal')
India <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'IND') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'India')
Thailand <- read.xlsx('Covid Weekly cases & deaths.xlsx', sheet = 'THA') %>%
select(EPI_W,New.Cases,New.Deaths) %>% mutate(Country = 'Thailand')
View(Thailand)
data <- rbind(Bangladesh, Myanmar, Nepal, India, Thailand)
# Add the year column (e.g., 2025)
data$Year <- 2025
# Create ISO week format (e.g., "2025-W01")
data$ISOweek <- sprintf("%d-W%02d", data$Year, data$EPI_W)
# Get the last date (Sunday) of each ISO week
# Use "-7" for Sunday
data$date <- ISOweek::ISOweek2date(paste0(data$ISOweek, "-7"))
data <- data %>% select(-ISOweek) %>% select(Country, date, Year, EPI_W,
New.Cases, New.Deaths)
View(data)
group_data <- summary_data %>%
group_by(ISO_week, lineage_group, ISO_week_end) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(ISO_week, ISO_week_end) %>%
mutate(
Country = 'All Country',
percent = (n / sum(n)) * 100
) %>%
select(Country, ISO_week, lineage_group, ISO_week_end, n, percent)
data <- rbind(group_data, summary_data)
head(data)
#save github
setwd("~/GitHub/WHO_SEAR/Dat")
read.csv('covid_searo.csv')
z <- read.csv('https://raw.githubusercontent.com/Dhihram/WHO_SEAR/refs/heads/main/Dat/cholera_dat.csv')
library(tidyverse)
library(lubridate)
library(MMWRweek)
setwd("C:/Users/dhihr/Downloads")
data <- read.csv('Weekly Data Entry Form(DATA)(1).csv')
data <- data %>% filter(COUNTRY %in% c('Bangladesh', 'Bhutan', 'India',
'Myanmar', 'Maldives', 'Nepal','Sri Lanka',
'Thailand', 'Timor-Leste'))
data$DATEREP <- as.Date(data$DATEREP)
head(data)
head(data)
data <- data %>% filter(COUNTRY %in% c('Bangladesh', 'Bhutan', 'India',
'Myanmar', 'Maldives', 'Nepal','Sri Lanka',
'Thailand', 'Timor-Leste'))
setwd("C:/Users/dhihr/Downloads")
data <- read.csv('Weekly Data Entry Form(DATA)(1).csv')
data$DATEREP <- as.Date(data$DATEREP)
summary_data <- data %>%
mutate(
DATEREP = as.Date(DATEREP),
NEW_CONF_CASES = as.numeric(NEW_CONF_CASES),
NEW_SUS_DEATHS = as.numeric(NEW_SUS_DEATHS),
NEW_SUS_CASES = as.numeric(NEW_SUS_CASES)
) %>%
mutate(
mwmr = MMWRweek(DATEREP),
MMWR_YEAR = mwmr$MMWRyear,
MMWR_WEEK = mwmr$MMWRweek,
MMWR_WEEK_START = MMWRweek2Date(MMWR_YEAR, MMWR_WEEK)
) %>%
group_by(MMWR_WEEK_START, COUNTRY) %>%
summarise(
NEW_CONF_CASES = sum(NEW_CONF_CASES, na.rm = TRUE),
NEW_SUS_DEATHS = sum(NEW_SUS_DEATHS, na.rm = TRUE),
EPI_WEEK = unique(mwmr$MMWRweek),
EPI_YEAR = unique(mwmr$MMWRyear),
.groups = "drop"
) %>%
arrange(COUNTRY, MMWR_WEEK_START)
library(tidyverse)
library(lubridate)
library(MMWRweek)
setwd("C:/Users/dhihr/Downloads")
data <- read.csv('Weekly Data Entry Form(DATA)(1).csv')
data <- data %>% filter(COUNTRY %in% c('Bangladesh', 'Bhutan', 'India',
'Myanmar', 'Maldives', 'Nepal','Sri Lanka',
'Thailand', 'Timor-Leste'))
data$DATEREP <- as.Date(data$DATEREP)
head(data)
summary_data <- data %>%
mutate(
DATEREP = as.Date(DATEREP),
NEW_CONF_CASES = as.numeric(NEW_CONF_CASES),
NEW_SUS_DEATHS = as.numeric(NEW_SUS_DEATHS),
NEW_SUS_CASES = as.numeric(NEW_SUS_CASES)
) %>%
mutate(
mwmr = MMWRweek(DATEREP),
MMWR_YEAR = mwmr$MMWRyear,
MMWR_WEEK = mwmr$MMWRweek,
MMWR_WEEK_START = MMWRweek2Date(MMWR_YEAR, MMWR_WEEK)
) %>%
group_by(MMWR_WEEK_START, COUNTRY) %>%
summarise(
NEW_CONF_CASES = sum(NEW_CONF_CASES, na.rm = TRUE),
NEW_SUS_DEATHS = sum(NEW_SUS_DEATHS, na.rm = TRUE),
NEW_SUS_CASES = sum(NEW_SUS_CASES, na.rm = TRUE),
EPI_WEEK = unique(mwmr$MMWRweek),
EPI_YEAR = unique(mwmr$MMWRyear),
.groups = "drop"
) %>%
arrange(COUNTRY, MMWR_WEEK_START)
library(dplyr)
library(lubridate)
library(dplyr)
library(lubridate)
group_country <- summary_data %>%
group_by(MMWR_WEEK_START) %>%
summarise(
COUNTRY = "All Country",
NEW_CONF_CASES = sum(NEW_CONF_CASES, na.rm = TRUE),
NEW_SUS_DEATHS = sum(NEW_SUS_DEATHS, na.rm = TRUE),
NEW_SUS_CASES = sum(NEW_SUS_CASES, na.rm = TRUE),
EPI_WEEK = MMWRweek(MMWR_WEEK_START)$MMWRweek,
EPI_YEAR = MMWRweek(MMWR_WEEK_START)$MMWRyear,
.groups = "drop"
) %>%
arrange(EPI_YEAR, EPI_WEEK)
group_country <- group_country %>%
distinct(MMWR_WEEK_START, .keep_all = TRUE)
summary_data <- rbind(group_country, summary_data)
summary_data
# Step 2: Create complete grid of COUNTRY x WEEK
summary_data <- summary_data %>%
group_by(COUNTRY) %>%
complete(
MMWR_WEEK_START = seq(min(MMWR_WEEK_START), max(MMWR_WEEK_START), by = "1 week")
) %>%
ungroup() %>%
mutate(
NEW_CONF_CASES = replace_na(NEW_CONF_CASES, 0),
NEW_SUS_DEATHS = replace_na(NEW_SUS_DEATHS, 0),
NEW_SUS_CASES = replace_na(NEW_SUS_CASES, 0),
EPI_WEEK =  MMWRweek(MMWR_WEEK_START)$MMWRyear,
EPI_YEAR = MMWRweek(MMWR_WEEK_START)$MMWRweek
) %>%
arrange(COUNTRY, MMWR_WEEK_START)
#save to database
setwd("C:/Users/dhihr/World Health Organization/SEARO_HIM - database/cholera")
write.csv(summary_data, 'data_cholera_21072025.csv', row.names = FALSE)
#save to github
setwd("~/GitHub/WHO_SEAR/Dat")
write.csv(summary_data, 'cholera_dat.csv', row.names = FALSE)
View(data)
View(data)
View(summary_data)
