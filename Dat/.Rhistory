}
flu_dat <- data
flu_dat_agg <- flu_dat %>%
mutate(
VIC = rowSums(select(., BVIC_NODEL, BVIC_DELUNK, BVIC_3DEL, BVIC_2DEL), na.rm = TRUE),
MMWR_WEEKSTARTDATE = as.Date(MMWR_WEEKSTARTDATE)
) %>%
group_by(COUNTRY_AREA_TERRITORY, MMWR_WEEKSTARTDATE) %>%
summarise(
flu_all = sum(INF_ALL, na.rm = TRUE),
flu_vic = sum(VIC, na.rm = TRUE),
flu_ah5 = sum(AH5, na.rm = TRUE),
flu_ah3 = sum(AH3, na.rm = TRUE),
flu_ah1n12009 = sum(AH1N12009, na.rm = TRUE),
flu_ah1 = sum(AH1, na.rm = TRUE),
flu_anot = sum(ANOTSUBTYPED, na.rm = TRUE),
flu_bnot = sum(BNOTDETERMINED, na.rm = TRUE),
flu_byam = sum(BYAM, na.rm = TRUE),
specimen = sum(SPEC_PROCESSED_NB, na.rm = TRUE),
MMWR_WEEK = last(MMWR_WEEK),
COUNTRY_AREA_TERRITORY = last(COUNTRY_AREA_TERRITORY),
.groups = "drop"
) %>%
mutate(
pos_rate = round(ifelse(specimen > 0, (flu_all / specimen) * 100, 0), 2),
across(where(is.numeric), ~replace(., is.infinite(.) | is.na(.), 0)),
COUNTRY_AREA_TERRITORY = ifelse(COUNTRY_AREA_TERRITORY == "Democratic People's Republic of Korea", "DPR Korea", COUNTRY_AREA_TERRITORY))
flu_dat_agg
grouping_flu <- flu_dat %>%
mutate(
VIC = rowSums(select(., BVIC_NODEL, BVIC_DELUNK, BVIC_3DEL, BVIC_2DEL), na.rm = TRUE),
MMWR_WEEKSTARTDATE = as.Date(MMWR_WEEKSTARTDATE)
) %>%
group_by(MMWR_WEEKSTARTDATE) %>%
summarise(
COUNTRY_AREA_TERRITORY = 'All Country',
flu_all = sum(INF_ALL, na.rm = TRUE),
flu_vic = sum(VIC, na.rm = TRUE),
flu_ah5 = sum(AH5, na.rm = TRUE),
flu_ah3 = sum(AH3, na.rm = TRUE),
flu_ah1n12009 = sum(AH1N12009, na.rm = TRUE),
flu_ah1 = sum(AH1, na.rm = TRUE),
flu_anot = sum(ANOTSUBTYPED, na.rm = TRUE),
flu_bnot = sum(BNOTDETERMINED, na.rm = TRUE),
flu_byam = sum(BYAM, na.rm = TRUE),
specimen = sum(SPEC_PROCESSED_NB, na.rm = TRUE),
MMWR_WEEK = last(MMWR_WEEK),
COUNTRY_AREA_TERRITORY = last(COUNTRY_AREA_TERRITORY),
.groups = "drop"
) %>% select(COUNTRY_AREA_TERRITORY, everything()) %>%
mutate(
pos_rate = round(ifelse(specimen > 0, (flu_all / specimen) * 100, 0), 2),
across(where(is.numeric), ~replace(., is.infinite(.) | is.na(.), 0))
)
flu_dat_agg <- rbind(flu_dat_agg, grouping_flu)
# Set fixed max date
#date setting
# today's date
today <- Sys.Date()
first_day_epiweek <- floor_date(today, "week", week_start = 7) # Sunday
max <- first_day_epiweek-7
# Get the earliest and latest dates per country
date_bounds <- flu_dat_agg %>%
group_by(COUNTRY_AREA_TERRITORY) %>%
summarise(
start_date = min(MMWR_WEEKSTARTDATE, na.rm = TRUE),
last_data_date = max(MMWR_WEEKSTARTDATE, na.rm = TRUE),
.groups = "drop"
)
# Expand weekly dates per country
expanded_dates <- date_bounds %>%
rowwise() %>%
mutate(
week_seq = list(seq(start_date, max_target_date, by = "7 days"))
) %>%
unnest(week_seq) %>%
rename(MMWR_WEEKSTARTDATE = week_seq)
# Join with original data
flu_dat_expanded <- expanded_dates %>%
select(COUNTRY_AREA_TERRITORY, MMWR_WEEKSTARTDATE, last_data_date) %>%
left_join(flu_dat_agg, by = c("COUNTRY_AREA_TERRITORY", "MMWR_WEEKSTARTDATE"))
# Replace numeric columns: 0 up to last_data_date - NA after last_data_date
flu_dat_agg <- flu_dat_expanded %>%
mutate(
after_last = MMWR_WEEKSTARTDATE > last_data_date,
across(where(is.numeric), ~ifelse(after_last, NA, replace_na(.x, 0)))
) %>%
select(-last_data_date, -after_last) %>%
arrange(COUNTRY_AREA_TERRITORY, MMWR_WEEKSTARTDATE)
setwd("C:/Users/dhihr/OneDrive/bahan who/kerjaan who/influenza")
write.csv(flu_dat_agg, 'data_clean.csv', row.names = FALSE)
# Required: pivot data to long format for stacking
flu_dat_full <- flu_dat_agg
flu_dat_full <- flu_dat_full %>% filter(MMWR_WEEKSTARTDATE > as.Date('2018-01-01'))
flu_colors <- c(
"flu_ah1"        = "#C9C9C9",
"flu_ah1n12009"  = "#8FE6E7",
"flu_ah3"        = "#00A1D5",
"flu_ah5"        = "#74F907",
"flu_anot"       = "#104f82",
"flu_bnot"       = "#9c4b30",
"flu_byam"       = "#FFB86D",
"flu_vic"        = "#F79700"
)
flu_labels <- c(
"flu_ah1"        = "A(H1)",
"flu_ah1n12009"  = "A(H1N1)pdm2009",
"flu_ah3"        = "A(H3)",
"flu_ah5"        = "A(H5)",
"flu_anot"       = "A not Subtyped",
"flu_bnot"       = "B not Determined",
"flu_byam"       = "B Yamagata",
"flu_vic"        = "B Victoria"
)
flu_long <- flu_dat_full %>%
select(COUNTRY_AREA_TERRITORY, MMWR_WEEKSTARTDATE, pos_rate,
flu_ah1, flu_ah3, flu_ah5, flu_ah1n12009, flu_byam, flu_vic, flu_anot, flu_bnot) %>%
pivot_longer(
cols = starts_with("flu_"),
names_to = "Flu_Type",
values_to = "Cases"
)
flu_long <- flu_long %>%
mutate(Label = flu_labels[Flu_Type],
Color = flu_colors[Flu_Type])
setwd("~/GitHub/WHO_SEAR/Dat")
write.csv(flu_dat_full, "flu_dat_full.csv", row.names = FALSE)
write.csv(flu_long, "flu_long.csv", row.names = FALSE)
flu_dat <- data
flu_dat <- flu_dat %>% filter(COUNTRY_AREA_TERRITORY != 'Indonesia')
flu_dat_agg <- flu_dat %>%
mutate(
VIC = rowSums(select(., BVIC_NODEL, BVIC_DELUNK, BVIC_3DEL, BVIC_2DEL) %>%
mutate(across(everything(), as.numeric)), na.rm = TRUE),
MMWR_WEEKSTARTDATE = as.Date(MMWR_WEEKSTARTDATE)
) %>%
group_by(COUNTRY_AREA_TERRITORY, MMWR_WEEKSTARTDATE) %>%
summarise(
flu_all = sum(as.numeric(INF_ALL), na.rm = TRUE),
flu_vic = sum(as.numeric(VIC), na.rm = TRUE),
flu_ah5 = sum(as.numeric(AH5), na.rm = TRUE),
flu_ah3 = sum(as.numeric(AH3), na.rm = TRUE),
flu_ah1n12009 = sum(as.numeric(AH1N12009), na.rm = TRUE),
flu_ah1 = sum(as.numeric(AH1), na.rm = TRUE),
flu_anot = sum(as.numeric(ANOTSUBTYPED), na.rm = TRUE),
flu_bnot = sum(as.numeric(BNOTDETERMINED), na.rm = TRUE),
flu_byam = sum(as.numeric(BYAM), na.rm = TRUE),
specimen = sum(as.numeric(SPEC_PROCESSED_NB), na.rm = TRUE),
MMWR_WEEK = last(MMWR_WEEK),
COUNTRY_AREA_TERRITORY = last(COUNTRY_AREA_TERRITORY),
.groups = "drop"
) %>%
mutate(
pos_rate = round(ifelse(specimen > 0, (flu_all / specimen) * 100, 0), 2),
across(where(is.numeric), ~replace(., is.infinite(.) | is.na(.), 0)),
COUNTRY_AREA_TERRITORY = ifelse(COUNTRY_AREA_TERRITORY == "Democratic People's Republic of Korea", "DPR Korea", COUNTRY_AREA_TERRITORY)) %>%
filter(year(MMWR_WEEKSTARTDATE) >= 2025)
flu_dat_agg
grouping_flu <- flu_dat %>%
filter(MMWR_WEEKSTARTDATE >= max-14) %>%
mutate(
VIC = rowSums(select(., BVIC_NODEL, BVIC_DELUNK, BVIC_3DEL, BVIC_2DEL), na.rm = TRUE),
MMWR_WEEKSTARTDATE = as.Date(MMWR_WEEKSTARTDATE)
) %>%
group_by(MMWR_WEEKSTARTDATE) %>%
summarise(
COUNTRY_AREA_TERRITORY = 'All Country',
flu_all = sum(INF_ALL, na.rm = TRUE),
flu_vic = sum(VIC, na.rm = TRUE),
flu_ah5 = sum(AH5, na.rm = TRUE),
flu_ah3 = sum(AH3, na.rm = TRUE),
flu_ah1n12009 = sum(AH1N12009, na.rm = TRUE),
flu_ah1 = sum(AH1, na.rm = TRUE),
flu_anot = sum(ANOTSUBTYPED, na.rm = TRUE),
flu_bnot = sum(BNOTDETERMINED, na.rm = TRUE),
flu_byam = sum(BYAM, na.rm = TRUE),
specimen = sum(SPEC_PROCESSED_NB, na.rm = TRUE),
MMWR_WEEK = last(MMWR_WEEK),
COUNTRY_AREA_TERRITORY = last(COUNTRY_AREA_TERRITORY),
.groups = "drop"
) %>% select(COUNTRY_AREA_TERRITORY, everything()) %>%
mutate(
pos_rate = round(ifelse(specimen > 0, (flu_all / specimen) * 100, 0), 2),
across(where(is.numeric), ~replace(., is.infinite(.) | is.na(.), 0))
)
flu_dat_agg <- rbind(flu_dat_agg, grouping_flu)
# Step 1: Create complete weekly grid
flu_dat_full <- expand.grid(
COUNTRY_AREA_TERRITORY = unique(flu_dat_agg$COUNTRY_AREA_TERRITORY),
MMWR_WEEKSTARTDATE = seq(
min(flu_dat_agg$MMWR_WEEKSTARTDATE, na.rm = TRUE),
max, by = "7 days"
)
)
# Step 2: Join with the aggregated data
flu_dat_full <- flu_dat_full %>%
left_join(flu_dat_agg, by = c("COUNTRY_AREA_TERRITORY", "MMWR_WEEKSTARTDATE")) %>%
mutate(across(where(is.numeric), ~replace_na(.x, 0))) %>%
filter(MMWR_WEEKSTARTDATE >= max-14) %>%
mutate(MMWR_WEEK = MMWRweek(MMWR_WEEKSTARTDATE)$MMWRweek)
summary_table <- flu_dat_full %>%
group_by(COUNTRY_AREA_TERRITORY) %>%
summarise(
`Total Samples Tested` = sum(specimen, na.rm = TRUE),
`Total Subtyped` = sum(flu_all, na.rm = TRUE),
`Positivity Rate %` = round((`Total Subtyped`/`Total Samples Tested`)*100,1),
`A (H1) %` = sum(flu_ah1, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H3) %` = sum(flu_ah3, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H5) %` = sum(flu_ah5, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H1N1)pdm09 %` = sum(flu_ah1n12009, na.rm = TRUE) / `Total Subtyped` * 100,
`A (Unsubtype) %` = sum(flu_anot, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Yamagata) %` = sum(flu_byam, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Victoria) %` = sum(flu_vic, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Lineage not Determined) %` = sum(flu_bnot, na.rm = TRUE) / `Total Subtyped` * 100
) %>%
mutate(across(where(is.numeric), ~ ifelse(is.nan(.) | is.infinite(.), 0, .))) %>%
arrange(COUNTRY_AREA_TERRITORY) %>%
rename(Country = COUNTRY_AREA_TERRITORY, `Number of Influenza Positive` = `Total Subtyped`)
# Apply formattable styles
ft <- formattable(summary_table,
list(
Country = formatter("span", style = ~ style(
color = "black",
font.weight = "bold",
font.size = ifelse(Country == "Timor-Leste", "12px", "14px")
)),
area(col = 2:3) ~ formatter("span",
x ~ prettyNum(x, big.mark = ",", preserve.width = "none")),
area(col = 4:12) ~ function(x) percent(x / 100, digits = 0),
area(col = 5:12) ~ color_tile("#fcedf2", "#d66389")
)
)
ft <- htmlwidgets::prependContent(
as.htmlwidget(ft),
tags$style(
HTML("
th {
background-color: #f2f2f2 !important;
color: black !important;
font-weight: bold !important;
text-align: center !important;
border-bottom: 2px solid #ccc !important;
}
")
)
)
# --- Paths ---
out_dir  <- "C:/Users/dhihr/Documents/automate"
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
export_html <- file.path(out_dir, "summary_table.html")
png_path    <- file.path(out_dir, sprintf("summary_table_%s.png", date_str))
# --- Ensure Chrome path for Task Scheduler ---
Sys.setenv(CHROME_PATH = "C:/Program Files/Google/Chrome/Application/chrome.exe")
# --- Try selfcontained export, fallback if needed ---
tryCatch({
saveWidget(ft, export_html, selfcontained = TRUE)
}, error = function(e) {
warning("Selfcontained export failed, falling back to _files mode: ", e$message)
saveWidget(ft, export_html, selfcontained = FALSE)
})
export_path <- normalizePath(export_html, winslash = "/")
# --- Capture PNG ---
webshot2::webshot(
url      = paste0("file:///", export_path),
file     = png_path,
vwidth   = 1250,
vheight  = 500,
zoom     = 4,
delay    = 3,  # extra time for headless rendering
cliprect = "viewport"
)
#table 2
summary_table2 <- flu_dat_full %>%
group_by(COUNTRY_AREA_TERRITORY) %>%
summarise(
`Total Samples Tested` = sum(specimen, na.rm = TRUE),
`Total Subtyped` = sum(flu_all, na.rm = TRUE),
`A (H1)` = sum(flu_ah1),
`A (H3)` = sum(flu_ah3),
`A (H5)` = sum(flu_ah5),
`A (H1N1)pdm09` = sum(flu_ah1n12009),
`A (Unsubtype)` = sum(flu_anot),
`B (Yamagata)` = sum(flu_byam),
`B (Victoria)` = sum(flu_vic),
`B (Lineage not Determined)` = sum(flu_bnot)
)
summary_table2 <- summary_table2 %>%
select(-c(`Total Samples Tested`, `Total Subtyped`))
#combine to summary_table
combined_table <- full_join(summary_table, summary_table2, by = c("Country"="COUNTRY_AREA_TERRITORY"))
# Create merged columns for each A/B subtype
combined_prepped <- combined_table %>%
mutate(
`A (H1)` = paste0(`A (H1)`, " (", round(`A (H1) %`, 0), "%)"),
`A (H3)` = paste0(`A (H3)`, " (", round(`A (H3) %`, 0), "%)"),
`A (H5)` = paste0(`A (H5)`, " (", round(`A (H5) %`, 0), "%)"),
`A (H1N1)2009` = paste0(`A (H1N1)pdm09`, " (", round(`A (H1N1)pdm09 %`, 0), "%)"),
`A (Unsubtype)` = paste0(`A (Unsubtype)`, " (", round(`A (Unsubtype) %`, 0), "%)"),
`B (Yamagata)` = paste0(`B (Yamagata)`, " (", round(`B (Yamagata) %`, 0), "%)"),
`B (Victoria)` = paste0(`B (Victoria)`, " (", round(`B (Victoria) %`, 0), "%)"),
`B (Lineage not Determined)` = paste0(`B (Lineage not Determined)`, " (", round(`B (Lineage not Determined) %`, 0), "%)")
)
ft2 <- formattable(
combined_prepped %>%
select(Country,`Total Samples Tested`, `Number of Influenza Positive`, `Positivity Rate %`,
`A (H1)`, `A (H3)`, `A (H5)`, `A (H1N1)2009`, `A (Unsubtype)`,
`B (Yamagata)`, `B (Victoria)`, `B (Lineage not Determined)`),
list(
Country = formatter("span", style = ~ style(
color = "black",
font.weight = "bold",
font.size = ifelse(Country == "Timor-Leste", "12px", "14px")
)),
area(col = 2:3) ~ formatter("span",
x ~ prettyNum(x, big.mark = ",", preserve.width = "none")),
`A (H1)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`A (H1) %`, "#fcedf2", "#d66389"))
)),
`A (H3)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`A (H3) %`, "#fcedf2", "#d66389"))
)),
`A (H5)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`A (H5) %`, "#fcedf2", "#d66389"))
)),
`A (H1N1)pdm09` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`A (H1N1)pdm09 %`, "#fcedf2", "#d66389"))
)),
`A (Unsubtype)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`A (Unsubtype) %`, "#fcedf2", "#d66389"))
)),
`B (Yamagata)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`B (Yamagata) %`, "#fcedf2", "#d66389"))
)),
`B (Victoria)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`B (Victoria) %`, "#fcedf2", "#d66389"))
)),
`B (Lineage not Determined)` = formatter("span",
style = ~ style(
display = "block",
`border-radius` = "4px",
`padding-right` = "4px",
`background-color` = csscolor(gradient(combined_table$`B (Lineage not Determined) %`, "#fcedf2", "#d66389"))
))
)
)
ft2 <- htmlwidgets::prependContent(
as.htmlwidget(ft2),
tags$style(
HTML("
th {
background-color: #f2f2f2 !important;
color: black !important;
font-weight: bold !important;
text-align: center !important;
border-bottom: 2px solid #ccc !important;
}
")
)
)
# --- Paths table2 ---
out_dir  <- "C:/Users/dhihr/Documents/automate"
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
export_html <- file.path(out_dir, "summary_table2.html")
png_path    <- file.path(out_dir, sprintf("summary_table2_%s.png", date_str))
# --- Ensure Chrome path for Task Scheduler ---
Sys.setenv(CHROME_PATH = "C:/Program Files/Google/Chrome/Application/chrome.exe")
# --- Try selfcontained export, fallback if needed ---
tryCatch({
saveWidget(ft2, export_html, selfcontained = TRUE)
}, error = function(e) {
warning("Selfcontained export failed, falling back to _files mode: ", e$message)
saveWidget(ft2, export_html, selfcontained = FALSE)
})
export_path <- normalizePath(export_html, winslash = "/")
# --- Capture PNG ---
webshot2::webshot(
url      = paste0("file:///", export_path),
file     = png_path,
vwidth   = 1500,
vheight  = 500,
zoom     = 4,
delay    = 3,  # extra time for headless rendering
cliprect = "viewport"
)
df <- summary_table
# --- Columns for subtypes (all numeric %) ---
subtype_cols <- c(
"A (H1) %", "A (H3) %", "A (H5) %", "A (H1N1)pdm09 %", "A (Unsubtype) %",
"B (Yamagata) %", "B (Victoria) %", "B (Lineage not Determined) %"
)
# --- Regional totals (All Country row) ---
reg_row <- df %>% filter(Country == "All Country")
total_tested   <- reg_row$`Total Samples Tested`
total_positive <- reg_row$`Number of Influenza Positive`
positivity     <- reg_row$`Positivity Rate %`
a_h3_reg_pct   <- round(reg_row$`A (H3) %`, 0)
b_vic_reg_pct  <- round(reg_row$`B (Victoria) %`, 0)
# --- Country-level data (exclude All Country) ---
pct_tbl <- df %>% filter(Country != "All Country")
# --- Identify countries where A(H3) is predominant ---
predom_a_h3 <- pct_tbl %>%
rowwise() %>%
mutate(max_val = max(c_across(all_of(subtype_cols)), na.rm = TRUE)) %>%
ungroup() %>%
filter(!is.na(`A (H3) %`), `A (H3) %` == max_val, `A (H3) %` >= 70) %>%  # Exclude < 70%
arrange(desc(`A (H3) %`)) %>%   # Sort from largest to smallest
pull(Country)
# --- Identify countries where B(Victoria) is predominant ---
predom_b_vic <- pct_tbl %>%
rowwise() %>%
mutate(max_val = max(c_across(all_of(subtype_cols)), na.rm = TRUE)) %>%
ungroup() %>%
filter(!is.na(`B (Victoria) %`), `B (Victoria) %` == max_val, `B (Victoria) %` > 0) %>%  # Exclude 0%
arrange(desc(`B (Victoria) %`)) %>%  # Sort from largest to smallest
pull(Country)
# --- Identify countries with small sample size (<50) ---
low_sample_countries <- df %>%
filter(Country != "All Country", `Total Samples Tested` < 50) %>%
arrange(desc(`Total Samples Tested`)) %>%
pull(Country)
# --- Helper to add commas and 'and' before last country ---
format_list_with_and <- function(x) {
x <- unique(x)
if (length(x) == 0) return("")
if (length(x) == 1) return(x)
if (length(x) == 2) return(paste(x, collapse = " and "))
paste(paste(x[-length(x)], collapse = ", "), "and", x[length(x)])
}
# Helper: format country with its percentage
format_country_pct <- function(df, countries, subtype_col, label) {
df %>%
filter(Country %in% countries) %>%
transmute(Country, pct = round(.data[[subtype_col]], 0)) %>%
arrange(desc(pct)) %>%
mutate(txt = glue("{Country} ({pct}%)")) %>%
pull(txt)
}
# Example usage (using your existing variables)
a_h3_items  <- format_country_pct(pct_tbl, predom_a_h3, "A (H3) %", "A(H3)")
b_vic_items <- format_country_pct(pct_tbl, predom_b_vic, "B (Victoria) %", "B(Victoria)")
#for table
max_week <- MMWRweek(max)$MMWRweek
min_week <- max_week-2
last_submission <- max(as.Date(flu_dat_full$MMWR_WEEKSTARTDATE, format = "%d %b %Y"))
# --- Compose paragraph text ---
table3_text <- sprintf(
"• Table X shows influenza virus subtype and lineage distribution across ten countries in the WHO South-East Asia Region for epidemiological weeks %s to %s of 2025, based on data extracted from WHO’s RespiMart platforms on %s. The last submission was on %s.",
min_week,
max_week,
format(Sys.Date(), "%d %b %Y"),
format(last_submission, "%d %b %Y")
)
# --- Combine into bullets using the • symbol ---
total_tested_bullet <- sprintf(
"• A total of %s samples were tested across the region, out of which %s (%s%%) were positive for influenza. These were subtyped, and results are shown in Table X.",
format(total_tested, big.mark = " "),
total_positive,
round(positivity)
)
a_h3_bullet <- sprintf(
"• A(H3) is predominant strain in %s.",
format_list_with_and(a_h3_items)
)
b_vic_bullet <- sprintf(
"• B(Victoria) lineage accounted for %s%% of influenza virus detected overall in the region, %s.",
b_vic_reg_pct,
format_list_with_and(b_vic_items)
)
low_sample_countries_bullet <- sprintf(
"• %s had no submission or small sample size (fewer than 50 samples).",
paste(low_sample_countries, collapse = ", ")
)
# --- Combine all into a single text block ---
summary_text <- c(
table3_text,
total_tested_bullet,
a_h3_bullet,
b_vic_bullet,
low_sample_countries_bullet
)
# Define output path (adjust as needed)
out_path <- "C:/Users/dhihr/Documents/automate/influenza_summary.txt"
# Write to text file
writeLines(summary_text, out_path)
