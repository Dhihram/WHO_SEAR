MMWR_WEEKSTARTDATE <= input$input_range[2]) %>%
filter(COUNTRY_AREA_TERRITORY == input$country_filter)
df
})
filtered_data3 <- reactive({
df <- data_flu_tab()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2])
summary_table <- df %>%
group_by(COUNTRY_AREA_TERRITORY) %>%
summarise(
`Total Samples Tested` = sum(specimen, na.rm = TRUE),
`Total Subtyped` = sum(flu_all, na.rm = TRUE),
`A (H1) %` = sum(flu_ah1, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H3) %` = sum(flu_ah3, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H5) %` = sum(flu_ah5, na.rm = TRUE) / `Total Subtyped` * 100,
`A (H1N1)2009 %` = sum(flu_ah1n12009, na.rm = TRUE) / `Total Subtyped` * 100,
`A (Unsubtyped) %` = sum(flu_anot, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Yamagata) %` = sum(flu_byam, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Victoria) %` = sum(flu_vic, na.rm = TRUE) / `Total Subtyped` * 100,
`B (Unsubtyped) %` = sum(flu_bnot, na.rm = TRUE) / `Total Subtyped` * 100
) %>%
mutate(across(where(is.numeric), ~ ifelse(is.nan(.) | is.infinite(.), 0, .))) %>%
arrange(COUNTRY_AREA_TERRITORY) %>%
rename(Country = COUNTRY_AREA_TERRITORY)
summary_table
})
filtered_data4 <- reactive({
df <- data_flu_id()
df <- df %>%
filter(MMWR_WEEKSTARTDATE >= input$input_range[1],
MMWR_WEEKSTARTDATE <= input$input_range[2]) %>%
filter(COUNTRY_AREA_TERRITORY == input$country_filter)
df
})
filtered_data5 <- reactive({
df <- data_covid_sentinel()
df <- df %>%
filter(Week.start.date >= input$input_range[1],
Week.start.date <= input$input_range[2]) %>%
filter(Country == input$country_filter)
df
})
#cholera
filtered_cholera <- reactive({
df <- data_cholera()
df <- df %>%
filter(MMWR_WEEK_START >= input$cholera_range[1],
MMWR_WEEK_START <= input$cholera_range[2]) %>%
filter(COUNTRY == input$country_filter)
df
})
#dengue
filtered_deng <- reactive({
df <- data_deng()
start_date <- floor_date(input$dengue_range[1], unit = "month")
end_date <- floor_date(input$dengue_range[2], unit = "month")
df <- df %>%
filter(date >= start_date,
date <= end_date) %>%
filter(country == input$country_filter)
df
})
filtered_deng2 <- reactive({
filtered_data <- filtered_deng()
monthly_summary <- filtered_data %>%
group_by(country, month) %>%
summarise(
mean_cases = mean(cases, na.rm = TRUE),
median_cases = median(cases, na.rm = TRUE),
sd_cases = sd(cases, na.rm = TRUE),
n = n(),
.groups = "drop"
) %>%
mutate(
error_margin = 1.96 * (sd_cases / sqrt(n)),
lower = mean_cases - error_margin,
upper = mean_cases + error_margin
)
monthly_summary$month <- factor(monthly_summary$month, levels = month.abb, ordered = TRUE)
monthly_summary <- monthly_summary %>% arrange(month)
})
# Total cases flu
output$total_cases <- renderValueBox({
total <- sum(filtered_data2()$flu_all, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Cases",
icon = icon("calculator"),
color = "blue"
)
})
# Average cases per week flu
output$avg_cases <- renderValueBox({
avg <- mean(filtered_data2()$flu_all, na.rm = TRUE)
shinydashboard::valueBox(
value = round(avg, 2),
subtitle = "Average Cases Per Week",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation flu
output$growth_rate <- renderValueBox({
data <- filtered_data2() %>%
arrange(MMWR_WEEKSTARTDATE) %>%
filter(!is.na(flu_all))
if (nrow(data) >= 2) {
last_week <- tail(data$flu_all, 1)
prev_week <- tail(data$flu_all, 2)[1]
if (!is.na(prev_week) && prev_week != 0) {
growth_rate <- round((last_week - prev_week) / prev_week * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
# Total cases dengue
output$total_cases2 <- renderValueBox({
total <- sum(filtered_deng()$cases, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Cases",
icon = icon("calculator"),
color = "blue"
)
})
# Average cases per week dengue
output$avg_cases2 <- renderValueBox({
avg <- mean(filtered_deng()$cases, na.rm = TRUE)
shinydashboard::valueBox(
value <- format(round(avg, 2), big.mark = ","),
subtitle = "Average Cases Per Month",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation dengue
output$growth_rate2 <- renderValueBox({
data <- filtered_deng() %>%
arrange(date) %>%
filter(!is.na(cases))
if (nrow(data) >= 2) {
last_month <- tail(data$cases, 1)
prev_month <- tail(data$cases, 2)[1]
if (!is.na(prev_month) && prev_month != 0) {
growth_rate <- round((last_month - prev_month) / prev_month * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
# Total cases cholera
output$total_cases3 <- renderValueBox({
total <- sum(filtered_cholera()$NEW_CONF_CASES, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Cases",
icon = icon("calculator"),
color = "blue"
)
})
# Total death cholera
output$total_death3 <- renderValueBox({
total <- sum(filtered_cholera()$NEW_SUS_DEATHS, na.rm = TRUE)
shinydashboard::valueBox(
value = format(total, big.mark = ","),
subtitle = "Total Suspected Death",
icon = icon("calculator"),
color = "purple"
)
})
# Average cases per week cholera
output$avg_cases3 <- renderValueBox({
avg <- mean(filtered_cholera()$NEW_CONF_CASES, na.rm = TRUE)
shinydashboard::valueBox(
value = round(avg, 2),
subtitle = "Average Cases Per Week",
icon = icon("chart-bar"),
color = "green"
)
})
# Growth rate calculation cholera
output$growth_rate3 <- renderValueBox({
data <- filtered_cholera() %>%
arrange(MMWR_WEEK_START) %>%
filter(!is.na(NEW_CONF_CASES))
if (nrow(data) >= 2) {
last_week <- tail(data$NEW_CONF_CASES, 1)
prev_week <- tail(data$NEW_CONF_CASES, 2)[1]
if (!is.na(prev_week) && prev_week != 0) {
growth_rate <- round((last_week - prev_week) / prev_week * 100, 2)
value <- paste0(growth_rate, "%")
} else {
value <- "N/A"
}
} else {
value <- "N/A"
}
shinydashboard::valueBox(
value = value,
subtitle = "Growth Rate",
icon = icon("chart-line"),
color = "red"
)
})
#News Ticker
output$news_ticker <- renderUI({
# Simulated outbreak_df (you can replace this with your real data)
outbreak_df <- read.csv('https://raw.githubusercontent.com/Dhihram/WHO_SEAR/refs/heads/main/Dat/who_outbreak.csv')
# Collapse outbreak entries into a scrolling sentence
ticker_text <- paste0(outbreak_df$disease, " - ", outbreak_df$country, " (", outbreak_df$date, ")", collapse = " | ")
tags$div(class = "ticker-text", ticker_text)
})
# Plot
#flu
output$cases_plot <- renderPlotly({
data <- filtered_data()
data2 <- filtered_data2()
flu_colors <- c(
"flu_ah1"        = "#C9C9C9",
"flu_ah1n12009"  = "#8FE6E7",
"flu_ah3"        = "#00A1D5",
"flu_ah5"        = "#74F907",
"flu_anot"       = "#104f82",
"flu_bnot"       = "#9c4b30",
"flu_byam"       = "#FFB86D",
"flu_vic"        = "#F79700"
)
flu_labels <- c(
"flu_ah1"        = "A(H1)",
"flu_ah1n12009"  = "A(H1N1)pdm2009",
"flu_ah3"        = "A(H3)",
"flu_ah5"        = "A(H5)",
"flu_anot"       = "A not Subtyped",
"flu_bnot"       = "B not Determined",
"flu_byam"       = "B Yamagata",
"flu_vic"        = "B Victoria"
)
p <- plot_ly()
for (type in unique(na.omit(data$Flu_Type))) {
df_sub <- data %>% filter(Flu_Type == type)
p <- p %>%
add_trace(
data = df_sub,
x = ~MMWR_WEEKSTARTDATE,
y = ~Cases,
type = "bar",
name = flu_labels[[type]],
marker = list(color = flu_colors[[type]]),
hoverinfo = "text",
hovertext = ~paste0(flu_labels[[type]], ": ", Cases, " cases")
)
}
p <- p %>%
add_lines(
data = data2,
x = ~MMWR_WEEKSTARTDATE,
y = ~pos_rate,
yaxis = "y2",
name = "Positive Rate",
line = list(color = "red"),
hoverinfo = "text",
hovertext = ~paste0("Pos rate: ", pos_rate, "%")
) %>%
layout(
barmode = "stack",
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Flu Cases"),
yaxis2 = list(
overlaying = "y",
side = "right",
anchor = "x",
title = "Positive Rate (%)",
titlefont = list(color = "red"),
tickfont = list(color = "red"),
showgrid = FALSE
),
margin = list(t = 80, r = 80),  # Add top margin for the legend
legend = list(
orientation = "h",
x = 0.5,
y = 1.15,
xanchor = "center",
yanchor = "bottom"
)
)
p
})
output$ili_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~ILI_CASE, name = "ILI Case", marker = list(color = 'blue')) %>%
add_lines(y = ~ili_1000, name = "ILI per 1000", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "ILI Cases"),
yaxis2 = list(
title = "ILI per 1000",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
output$sari_plot <- renderPlotly({
df <- filtered_data4()
plot_ly(df, x = ~MMWR_WEEKSTARTDATE) %>%
add_bars(y = ~SARI_CASE, name = "SARI Case", marker = list(color = 'darkgreen')) %>%
add_lines(y = ~sari_100, name = "SARI per 100", yaxis = "y2", line = list(color = 'red')) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "SARI Cases"),
yaxis2 = list(
title = "SARI per 100",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
output$covid_sentinel_plot <- renderPlotly({
df <- filtered_data5()
plot_ly(df, x = ~Week.start.date) %>%
add_bars(y = ~SARS_COV_2_POS, name = "Positive Case", marker = list(color = 'darkviolet')) %>%
add_lines(y = ~`X..Pos.Rate`, name = "% Pos Rate", yaxis = "y2", line = list(color = "red", dash = "dot")) %>%
layout(
title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Positive Cases", side = "left"),
yaxis2 = list(title = "% Positivity Rate", side = "right",
overlaying = "y",
side = "right",
showgrid = FALSE,
titlefont = list(color = "red"),
tickfont = list(color = "red"),
automargin = TRUE
),
legend = list(
orientation = "h",
x = 0.1, y = 1.1,
xanchor = "left"
),
margin = list(t = 80)
)
})
# table
output$summary_table_ui <- renderUI({
summary_table <- filtered_data3()
table_html <- formattable::formattable(summary_table,
list(
Country = formatter("span", style = ~ style(color = "black", font.weight = "bold")),
area(col = 2:3) ~ formatter("span",
x ~ prettyNum(x, big.mark = ",", preserve.width = "none")),
area(col = 4:11) ~ function(x) percent(x / 100, digits = 2),
area(col = 4:11) ~ color_tile("#fcedf2", "#d66389")
)
)
HTML(as.character(table_html))  # convert to HTML for rendering in UI
})
#plot dengue
output$years_deng_plot <- renderPlotly({
req(filtered_deng())  # ensure reactive input is ready
data <- filtered_deng()
# Ensure 'year' and 'month' are ordered
data$year <- factor(data$year)
data$month <- factor(data$month, levels = month.abb, ordered = TRUE)
years <- sort(unique(data$year))
last_year <- tail(years, 1)
n_prev_years <- length(years) - 1
# Handle color generation safely
base_colors <- brewer.pal(min(max(n_prev_years, 3), 8), "Set2")
if (n_prev_years > 8) {
extra_colors <- brewer.pal(n_prev_years - 8, "Dark2")
base_colors <- c(base_colors, extra_colors)
}
# Convert base colors to rgba for transparency
alpha_colors <- sapply(base_colors, function(clr) {
rgb_val <- col2rgb(clr) / 255
sprintf("rgba(%d,%d,%d,0.6)", rgb_val[1]*255, rgb_val[2]*255, rgb_val[3]*255)
})
color_palette <- c(
setNames(alpha_colors, years[-length(years)]),
setNames("red", last_year)
)
# Initialize plot
p <- plot_ly()
for (yr in years) {
df_year <- data %>% filter(year == yr) %>% arrange(month)
line_style <- if (yr == last_year) "solid" else "dash"
line_color <- color_palette[[as.character(yr)]]
line_opacity <- if (yr == last_year) 1 else 0.97
p <- p %>% add_trace(
data = df_year,
x = ~month,
y = ~cases,
type = 'scatter',
mode = 'lines+markers',
name = as.character(yr),
hovertemplate = paste0(yr, " : %{y:,}<extra></extra>"),
line = list(dash = line_style, width = 2, color = line_color),
marker = list(color = line_color),
opacity = line_opacity,
connectgaps = TRUE
)
}
p %>% layout(
title = ' ',
xaxis = list(title = "Month"),
yaxis = list(title = "Cases"),
hovermode = "x unified"
)
})
output$avg_deng_plot <- renderPlotly({
req(filtered_deng2())
monthly_summary <- filtered_deng2()
plot_ly(monthly_summary, x = ~month) %>%
# Confidence ribbon (lower to upper)
add_ribbons(
ymin = ~lower,
ymax = ~upper,
name = "95% CI",
fillcolor = "rgba(0,100,80,0.2)",
line = list(color = "transparent"),
showlegend = TRUE
) %>%
# Mean line and matching marker
add_trace(
y = ~mean_cases,
type = 'scatter',
mode = 'lines+markers',
name = "Mean Cases",
line = list(color = 'black'),
marker = list(color = 'black')
) %>%
# Median line and matching marker
add_trace(
y = ~median_cases,
type = 'scatter',
mode = 'lines+markers',
name = "Median Cases",
line = list(color = 'blue', dash = 'dash'),
marker = list(color = 'blue')
) %>%
layout(
title = " ",
xaxis = list(title = "Month", type = "category"),
yaxis = list(title = "Cases"),
hovermode = "x unified"
)
})
output$trend_cholera_plot <- renderPlotly({
req(filtered_cholera())
data <- filtered_cholera()
plot_ly(data, x = ~MMWR_WEEK_START) %>%
add_bars(y = ~NEW_CONF_CASES, name = "Positive Case", marker = list(color = 'green')) %>%
layout( title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Positive Cases", side = "left"))
})
output$trend_death_plot <- renderPlotly({
req(filtered_cholera())
data <- filtered_cholera()
plot_ly(data, x = ~MMWR_WEEK_START) %>%
add_bars(y = ~NEW_SUS_DEATHS, name = "Suspect Deaths", marker = list(color = 'firebrick')) %>%
layout( title = " ",
xaxis = list(title = "Week Start Date"),
yaxis = list(title = "Suspect Deaths", side = "left"))
})
}
# Launch app
shinyApp(ui, server)
